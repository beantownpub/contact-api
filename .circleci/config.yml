version: 2.1
executors:
  build_machine:
    machine:
      image: ubuntu-1604:202007-01
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
  debian:
    docker:
    - image: python:3.7-slim-buster

commands:
  install_yq:
    description: Install yq to get API version from swagger.yaml
    steps:
      - run:
          name: Install yq
          command: |
            if [ "$CIRCLE_JOB" = "deploy" ]; then
              apt-get update -y && apt-get install -y wget
              wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
              chmod a+x /usr/local/bin/yq
            else
              sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
              sudo chmod a+x /usr/local/bin/yq
            fi
  install_pytest:
    description: Install pytest for running tests
    steps:
      - run:
          name: Install dependencies
          command: pip install -r requirements.txt
  install_k8s_dependencies:
    description: Install dependencies for deploying to K8s cluster
    steps:
      - run:
          name: Install kubectl
          command: |
            apt-get update -y && apt-get install -y curl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl config set-credentials jalbot --token=$JALBOT_TOKEN
            kubectl config set-cluster prod --server=$K8S_SERVER --insecure-skip-tls-verify=true
            kubectl config set-context jalbot --cluster=prod --user=jalbot
            kubectl config use-context jalbot
      - run:
          name: Install helm
          command: |
            apt-get install apt-transport-https gnupg2 --yes
            curl https://baltocdn.com/helm/signing.asc | apt-key add -
            echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
            apt-get update
            apt-get install -y helm
  check_tags:
    description: Check if git tag matches swagger.yaml version
    steps:
      - run:
          name: Check tags
          command: |
            CONTACT_API_VERSION=$(yq eval '.info.version' swagger.yaml)
            GIT_TAG=$(git describe)
            if [ "$CONTACT_API_VERSION" != "$GIT_TAG" ]; then
                circleci-agent step halt
            fi

jobs:
  run_tests:
    executor: debian
    steps:
      - checkout
      - install_pytest
      - run:
          name: Run tests
          command: python -m pytest test/

  build_and_publish:
    executor: build_machine
    steps:
      - checkout
      - install_yq
      - run:
          name: Build Image
          command: |
            export CONTACT_API_VERSION=$(yq eval '.info.version' swagger.yaml)
            docker build -t contact_api:$CONTACT_API_VERSION .
      - check_tags
      - run:
          name: Publish Image
          command: |
            export CONTACT_API_VERSION=$(yq eval '.info.version' swagger.yaml)
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
            docker tag contact_api:$CONTACT_API_VERSION $DOCKER_USERNAME/contact_api:$CONTACT_API_VERSION
            docker push $DOCKER_USERNAME/contact_api:$CONTACT_API_VERSION

  deploy:
    circleci_ip_ranges: true
    executor: debian
    steps:
      - checkout
      - install_yq
      - check_tags
      - install_k8s_dependencies
      - run:
          name: Add Helm repo
          command: |
            helm repo add beantown $HELM_REPO
            kubectl config get-contexts
            kubectl get pods -n prod
      - run:
          name: Deploy contact-api
          command: |
            export CONTACT_API_VERSION=$(yq eval '.info.version' swagger.yaml)
            helm repo update
            helm upgrade --install contact-api beantown/contact-api \
              --namespace prod \
              --set global.env=prod \
              --set image.tag=$CONTACT_API_VERSION \
              --set logLevel=$LOG_LEVEL \
              --set aws_access_key_id="${AWS_ACCESS_KEY_ID}" \
              --set aws_secret_access_key="${AWS_SECRET_ACCESS_KEY}" \
              --set aws_default_region="${AWS_DEFAULT_REGION}" \
              --set email_recipient="${EMAIL_RECIPIENT}" \
              --set second_email_recipient="${SECOND_EMAIL_RECIPIENT}" \
              --set slack_channel="${SLACK_WEBHOOK_CHANNEL}" \
              --set slack_user="${SLACK_USER}" \
              --set slack_webhook_url="${SLACK_WEBHOOK_URL}" \
              --set support_email_address="${SUPPORT_EMAIL_ADDRESS}" \
              --set support_phone_number="${SUPPORT_PHONE_NUMBER}" \
              --set slack_partys_channel="${SLACK_PARTYS_CHANNEL}" \
              --set slack_orders_channel="${SLACK_ORDERS_CHANNEL}" \
              --set slack_orders_webhook_url=${SLACK_ORDERS_WEBHOOK_URL} \
              --set slack_partys_webhook_url=${SLACK_PARTYS_WEBHOOK_URL} \
              --set test_email_recipient="${TEST_EMAIL_RECIPIENT}" \
              --debug


workflows:
  version: 2
  contact_api:
    jobs:
      - run_tests
      - build_and_publish:
          requires:
            - run_tests
      - deploy:
          requires:
            - build_and_publish
